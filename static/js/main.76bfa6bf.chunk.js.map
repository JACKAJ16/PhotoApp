{"version":3,"sources":["components/Modal/Modal.js","components/Post/Create.js","components/App/App.js","serviceWorker.js","index.js"],"names":["modalRoot","document","getElementById","Modal","props","el","createElement","appendChild","this","removeChild","ReactDOM","createPortal","children","React","Component","Post","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","axios","post","state","then","response","console","log","alert","catch","error","title","body","onSubmit","id","placeholder","type","onChange","className","App","items","bigItems","showModal","text","date","handleClick","bind","handleClose","get","res","data","undefined","comments","newDate","Date","toString","map","item","alt","key","src","url","onClick","onClose","format","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.76bfa6bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nconst modalRoot = document.getElementById('modal-root');\r\n\r\n\r\nclass Modal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.el = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount() {\r\n    modalRoot.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    modalRoot.removeChild(this.el);\r\n  }\r\n  \r\n  render() {\r\n    return ReactDOM.createPortal(\r\n      this.props.children,\r\n      this.el,\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Modal;","import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\nimport './create.css';\r\n\r\n\r\nclass Post extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\ttitle: \"\",\r\n\t\t\tbody: \"\"\r\n\t\t}\r\n\t}\r\n\r\n\thandleChange = (e) => {\r\n\t\tthis.setState({[e.target.name]: e.target.value})\r\n\t}\r\n\r\n\r\n\r\n\r\n\thandleSubmit = e => {\r\n\t\te.preventDefault()\r\n\r\n\r\n\r\n\t\t/*Json placeholder is used just to show post method is working, the original source is not fully availible now*/\r\n\r\n\t\taxios.post('https://jsonplaceholder.typicode.com/posts', this.state)\r\n\t\t\t.then(response => {\r\n\t\t\t\tconsole.log(response)\r\n\t\t\t\talert(\"Комментарий добавлен!\")\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t})\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\tconst { title, body } = this.state\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input id=\"title\" placeholder=\"Ваше имя\" type=\"text\" name=\"title\" value={title} onChange={this.handleChange}/>\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input id=\"body\" placeholder=\"Ваш комментарий\" type=\"text\" name=\"body\" value={body} onChange={this.handleChange}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button className=\"submit\" type=\"submit\">Оставить комментарий</button>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Post","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Modal from \"../Modal/Modal.js\"\nimport Post from \"../Post/Create.js\"\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [],\n      bigItems: [],\n      id: 237,\n      showModal: false,\n      text: \"Хорошая фотка!\",\n      date: \"01.01.2020\"\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n\n  }\n\n  componentDidMount() {\n    axios.get(\"https://boiling-refuge-66454.herokuapp.com/images\")\n      .then(res => {\n        this.setState({\n          items: res.data\n        })\n      })\n    }\n  \n\n\n  //Showing Modal window by clicking on an image\n  handleClick(id) {\n    this.setState({\n      id: id,\n      showModal: true\n    }, function () {\n    axios.get(\"https://boiling-refuge-66454.herokuapp.com/images/\" + this.state.id)\n      .then(res => {\n        this.setState({\n          bigItems: res.data,\n        }) \n        if(res.data.comments[0] !== undefined) {\n        this.setState({\n          text: res.data.comments[0].text,\n          date: res.data.comments[0].date\n        })\n      }\n    });\n  })\n}\n\n  handleClose() {\n    this.setState({\n      showModal: false,\n      bigItems: []\n    })\n  }\n\n\n\n  render() {\n    var date = new Date(this.state.date);\n    var newDate = date.toString();\n    return (\n      <div>\n        <h1>Photo app</h1>\n        <div className=\"images\">          \n          {this.state.items.map(item => {\n            return (\n              <img alt={item.id} key={item.id} src={item.url} onClick={() => this.handleClick(item.id)}/>\n               )})}\n              {this.state.showModal ? (\n                <Modal onClose={this.handleClose}>\n                 <div className=\"modal\">\n                   <div className=\"modal-window\">\n                     <div className=\"row\">\n                       <img alt={this.state.bigItems.id} key={this.state.bigItems.id} className=\"modal-img\" src={this.state.bigItems.url} />\n                       <div className=\"comments\">\n                        <Moment className=\"date\" format=\"DD.MM.YYYY\">{newDate}</Moment>\n                        <br />\n                        {this.state.text}\n                        <button className=\"close\" onClick={this.handleClose}></button>\n                      </div> \n                     </div>\n                  <Post />\n                </div>\n               </div> \n              </Modal>\n              ) : null\n            }\n        </div>\n       </div>\n     )\n    }\n  }\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}